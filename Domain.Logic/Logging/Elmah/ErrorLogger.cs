using ElmahCore;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Domain.Logic.Logging.Elmah
{
    /// <summary>
    /// ElmahCore.ErrorLog implementation that works directly with our data access layer to store and retrieve errors.
    /// Note: Every data access operation in this implementation is executed within a scope generated by a ServiceScopeFactory
    /// because ElmahCore doesn't allow its services to be injected as "scoped" at the moment.
    /// </summary>
    public class ErrorLogger : ErrorLog
    {
        #region Properties

        private IServiceScopeFactory scopeFactory;

        #endregion

        #region Constructor

        public ErrorLogger(IServiceScopeFactory scopeFactory)
        {
            this.scopeFactory = scopeFactory;
        }

        #endregion

        #region ErrorLog Implementation

        /// <summary>
        /// Retrieves a single error by id from the database.
        /// </summary>
        public override ErrorLogEntry GetError(string id)
        {
            // Create disposable scope.
            using (var scope = scopeFactory.CreateScope())
            {
                // Inject ErrorLogService into this scope.
                var errorLogService = scope.ServiceProvider.GetService<ErrorLogService>();

                // Get error from the database by id.
                var error = errorLogService.Get(new Guid(id));

                // Parse ErrorLogEntity according to EmahCore's needs.
                return new ErrorLogEntry(this, id, ErrorXml.DecodeString(error.ErrorXml));
            }
        }

        /// <summary>
        /// Retrieves a collection of errors by page from the database.
        /// </summary>
        public override int GetErrors(int pageIndex, int pageSize, ICollection<ErrorLogEntry> errorEntryList)
        {
            // Create disposable scope.
            using (var scope = scopeFactory.CreateScope())
            {
                // Inject ErrorLogService into this scope.
                var errorLogService = scope.ServiceProvider.GetService<ErrorLogService>();

                // Retrieve errors from the database and parse them according to EmahCore's needs.
                var errorLogs = errorLogService.GetPage(pageIndex, pageSize).ToList();

                // Parse ErrorLog to ElmahError and store it in errorEntryList.
                foreach (var errorLog in errorLogs)
                {
                    errorEntryList.Add(new ErrorLogEntry(this, errorLog.Id.ToString(), ErrorParser.EntityToElmah(errorLog)));
                }

                // Return amount of errors found.
                return errorLogService.GetAll().Count();
            }
        }

        /// <summary>
        /// Logs a new error into the database.
        /// </summary>
        public override string Log(Error error)
        {
            // Create disposable scope.
            using (var scope = scopeFactory.CreateScope())
            {
                // Inject ErrorLogService into this scope.
                var errorLogService = scope.ServiceProvider.GetService<ErrorLogService>();

                // Parse error to errorLogEntity.
                var errorEntity = ErrorParser.ElmahToEntity(error);
                errorEntity.ErrorXml = ErrorXml.EncodeString(error);

                // Insert errorLogEntity into the database.
                errorLogService.Create(errorEntity);

                // Return error id.
                return errorEntity.Id.ToString();
            }
        }

        #endregion
    }
}